package com.zjgsu.lll.course.repository;

import com.zjgsu.lll.course.model.Student;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

@Repository
public class StudentRepository {
    private final Map<String, Student> students = new ConcurrentHashMap<>();

    public StudentRepository() {
        // 初始化示例学生数据
        initSampleData();
    }

    private void initSampleData() {
        // 学生1
        Student student1 = new Student();
        student1.setId("S001");
        student1.setStudentId("2024001");
        student1.setName("张三");
        student1.setMajor("计算机科学与技术");
        student1.setGrade(2024);
        student1.setEmail("zhangsan@student.edu.cn");
        student1.setCreatedAt(LocalDateTime.now());
        students.put(student1.getId(), student1);

        // 学生2
        Student student2 = new Student();
        student2.setId("S002");
        student2.setStudentId("2024002");
        student2.setName("李四");
        student2.setMajor("软件工程");
        student2.setGrade(2024);
        student2.setEmail("lisi@student.edu.cn");
        student2.setCreatedAt(LocalDateTime.now());
        students.put(student2.getId(), student2);

        // 学生3
        Student student3 = new Student();
        student3.setId("S003");
        student3.setStudentId("2024003");
        student3.setName("王五");
        student3.setMajor("数据科学与大数据技术");
        student3.setGrade(2024);
        student3.setEmail("wangwu@student.edu.cn");
        student3.setCreatedAt(LocalDateTime.now());
        students.put(student3.getId(), student3);
    }

    public List<Student> findAll() {
        return new ArrayList<>(students.values());
    }

    public Optional<Student> findById(String id) {
        return Optional.ofNullable(students.get(id));
    }

    public Optional<Student> findByStudentId(String studentId) {
        return students.values().stream()
                .filter(s -> s.getStudentId().equals(studentId))
                .findFirst();
    }

    public Student save(Student student) {
        students.put(student.getId(), student);
        return student;
    }

    public void delete(String id) {
        students.remove(id);
    }
}
